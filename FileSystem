public interface FileSystem {
    String getName();
    void print(String structure);
    void add(FileSystem component);
    void remove(FileSystem component);
    List<FileSystem> getChildren();
}

@AllArgsConstructor
public class File implements  FileSystem {
    private final String fileName;

    @Override
    public String getName() {
        return fileName;
    }

    @Override
    public void print(String structure) {
        System.out.println(structure + fileName);
    }

    @Override
    public void add(FileSystem component) {
        throw new UnsupportedOperationException("Cannot add to a file");
    }

    @Override
    public void remove(FileSystem component) {
        throw new UnsupportedOperationException("Cannot remove from a file");
    }

    @Override
    public List<FileSystem> getChildren() {
        throw new UnsupportedOperationException("File does not have children.");
    }
}

public class Directory implements FileSystem {
    private final String directoryName;
    private final List<FileSystem> components;

    public Directory(String directoryName) {
        this.directoryName = directoryName;
        this.components = new ArrayList<>();
    }

    @Override
    public String getName() {
        return directoryName;
    }

    @Override
    public void print(String structure) {
        System.out.println(structure + directoryName + "/");
        for(FileSystem component : components) {
            component.print(structure + "   ");
        }
    }

    @Override
    public void add(FileSystem component) {
        components.add(component);
    }

    @Override
    public void remove(FileSystem component) {
        components.remove(component);
    }

    @Override
    public List<FileSystem> getChildren() {
        return components;
    }

}